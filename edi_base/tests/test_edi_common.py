import json

from pathlib import Path

from odoo import api, fields, models, registry
from odoo.tests.common import TransactionCase
from odoo.tools import mute_logger


FOLDER_EDI = Path('/tmp/edi')


FOLDER_IN = Path(FOLDER_EDI, 'in')
FOLDER_IN_DONE = Path(FOLDER_IN, 'done')
FOLDER_IN_ERROR = Path(FOLDER_IN, 'error')


FOLDER_OUT = Path(FOLDER_EDI, 'out')


class TestEDICommon(TransactionCase):
    """
    Common class to be inheritad by EDI tests for in and out flows.

    It opens a new environment to avoid messing with the test one and creates a
    basic connection to be used by integrations.

    It also makes sure that the integrations created by tests suites and the
    synchronizations created by individual tests are corectly cleaned.
    Also, it resets the integrations to their initial state between tests
    execution.

    Since the EDI framework uses with a different cursor when working with the
    `edi.syncronization` records generated by the integration, we need to create
    a new cursor to test the results of the integration too. On the other hand,
    the changes made on the integration and any other record modified by it, can
    be accessed by the cursor belonging to the new environment.
    """


    class ConnectionFolder(models.Model):

        _inherit = 'edi.connection'

        type = fields.Selection(
            selection_add=[('folder', 'Folder')],
            ondelete={'folder': 'cascade'}
        )


    class TestIntegration(models.Model):

        _inherit = 'edi.integration'

        type = fields.Selection(
            selection_add=[
                ('partner_folder_out', 'Export Partner in Folder'),
                ('partner_folder_in', 'Import Partner in Folder')
            ],
            ondelete={
                'partner_folder_out': 'cascade',
                'partner_folder_in': 'cascade'
            }
        )


    @classmethod
    def setUpClass(cls):

        super().setUpClass()

        cls.new_cr = registry(cls.env.cr.dbname).cursor()
        cls.new_env = api.Environment(cls.new_cr, cls.env.user.id, cls.env.context)

        cls.Integration = cls.new_env['edi.integration']

        cls.folder_connection = cls.new_env['edi.connection'].create({
            'name': 'Connection to folder',
            'type': 'folder',
            'configuration': json.dumps({
                'in_folder': str(FOLDER_IN),
                'in_folder_done': str(FOLDER_IN_DONE),
                'in_folder_error': str(FOLDER_IN_ERROR),
                'out_folder': str(FOLDER_OUT)
            })
        })

        cls.addClassCleanup(cls.new_cr.close)
        # NOTE: We clean the connections and the created integrations at the end
        #       of each test suite
        cls.addClassCleanup(cls._clean_connections, cls)
        cls.addClassCleanup(cls._clean_integrations, cls)

    @mute_logger('odoo.models.unlink')
    def _clean_connections(cls):

        with registry(cls.env.cr.dbname).cursor() as cr:

            env = api.Environment(
                cr,
                cls.env.user.id,
                cls.env.context
            )
            imds = env['ir.model.data'].search([
                ('model', '=', 'edi.connection')
            ])
            env['edi.connection'].search([
                ('id', 'not in', imds.mapped('res_id'))
            ]).unlink()

    @mute_logger('odoo.models.unlink')
    def _clean_integrations(cls):

        with registry(cls.env.cr.dbname).cursor() as cr:
            env = api.Environment(
                cr,
                cls.env.user.id,
                cls.env.context
            )
            imds = env['ir.model.data'].search([
                ('model', '=', 'edi.integration')
            ])
            env['edi.integration'].with_context(active_test=False).search([
                ('id', 'not in', imds.mapped('res_id'))
            ]).unlink()

    def setUp(self):

        super().setUp()

        # NOTE: We clean the created synchronizations between the execution of
        #       each individual test
        self.addCleanup(self._clean_synchronizations)
        # NOTE: We reset the integration between each individual test
        self.addCleanup(self._reset_integrations)

    @mute_logger('odoo.models.unlink')
    def _clean_synchronizations(self):

        with registry(self.env.cr.dbname).cursor() as cr:
            api.Environment(
                cr,
                self.env.user.id,
                self.env.context
            )['edi.synchronization'].search([]).unlink()

    def _reset_integrations(self):
        self.Integration.with_context(active_test=False).search([]).write({
            'last_sync_status': 'No Sync Yet',
            'last_success_date': False,
            'last_failure_date': False
        })
